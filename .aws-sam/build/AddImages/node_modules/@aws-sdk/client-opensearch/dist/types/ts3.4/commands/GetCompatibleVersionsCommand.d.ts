import { OpenSearchClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../OpenSearchClient";
import { GetCompatibleVersionsRequest, GetCompatibleVersionsResponse } from "../models/models_0";
import { Command as $Command } from "@aws-sdk/smithy-client";
import { Handler, MiddlewareStack, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer } from "@aws-sdk/types";
export interface GetCompatibleVersionsCommandInput extends GetCompatibleVersionsRequest {
}
export interface GetCompatibleVersionsCommandOutput extends GetCompatibleVersionsResponse, __MetadataBearer {
}
/**
 * <p>
 *       Returns a list of upgrade-compatible versions of OpenSearch/Elasticsearch.
 *       You can optionally pass a
 *       <code>
 *         <a>DomainName</a>
 *       </code>
 *       to get all upgrade-compatible versions of OpenSearch/Elasticsearch for that specific domain.
 *     </p>
 * @example
 * Use a bare-bones client and the command you need to make an API call.
 * ```javascript
 * import { OpenSearchClient, GetCompatibleVersionsCommand } from "@aws-sdk/client-opensearch"; // ES Modules import
 * // const { OpenSearchClient, GetCompatibleVersionsCommand } = require("@aws-sdk/client-opensearch"); // CommonJS import
 * const client = new OpenSearchClient(config);
 * const command = new GetCompatibleVersionsCommand(input);
 * const response = await client.send(command);
 * ```
 *
 * @see {@link GetCompatibleVersionsCommandInput} for command's `input` shape.
 * @see {@link GetCompatibleVersionsCommandOutput} for command's `response` shape.
 * @see {@link OpenSearchClientResolvedConfig | config} for command's `input` shape.
 *
 */
export declare class GetCompatibleVersionsCommand extends $Command<GetCompatibleVersionsCommandInput, GetCompatibleVersionsCommandOutput, OpenSearchClientResolvedConfig> {
    readonly input: GetCompatibleVersionsCommandInput;
    constructor(input: GetCompatibleVersionsCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: OpenSearchClientResolvedConfig, options?: __HttpHandlerOptions): Handler<GetCompatibleVersionsCommandInput, GetCompatibleVersionsCommandOutput>;
    private serialize;
    private deserialize;
}
