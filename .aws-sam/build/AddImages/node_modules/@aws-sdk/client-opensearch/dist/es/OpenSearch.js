import { __extends } from "tslib";
import { OpenSearchClient } from "./OpenSearchClient";
import { AcceptInboundConnectionCommand, } from "./commands/AcceptInboundConnectionCommand";
import { AddTagsCommand } from "./commands/AddTagsCommand";
import { AssociatePackageCommand, } from "./commands/AssociatePackageCommand";
import { CancelServiceSoftwareUpdateCommand, } from "./commands/CancelServiceSoftwareUpdateCommand";
import { CreateDomainCommand, } from "./commands/CreateDomainCommand";
import { CreateOutboundConnectionCommand, } from "./commands/CreateOutboundConnectionCommand";
import { CreatePackageCommand, } from "./commands/CreatePackageCommand";
import { DeleteDomainCommand, } from "./commands/DeleteDomainCommand";
import { DeleteInboundConnectionCommand, } from "./commands/DeleteInboundConnectionCommand";
import { DeleteOutboundConnectionCommand, } from "./commands/DeleteOutboundConnectionCommand";
import { DeletePackageCommand, } from "./commands/DeletePackageCommand";
import { DescribeDomainAutoTunesCommand, } from "./commands/DescribeDomainAutoTunesCommand";
import { DescribeDomainCommand, } from "./commands/DescribeDomainCommand";
import { DescribeDomainConfigCommand, } from "./commands/DescribeDomainConfigCommand";
import { DescribeDomainsCommand, } from "./commands/DescribeDomainsCommand";
import { DescribeInboundConnectionsCommand, } from "./commands/DescribeInboundConnectionsCommand";
import { DescribeInstanceTypeLimitsCommand, } from "./commands/DescribeInstanceTypeLimitsCommand";
import { DescribeOutboundConnectionsCommand, } from "./commands/DescribeOutboundConnectionsCommand";
import { DescribePackagesCommand, } from "./commands/DescribePackagesCommand";
import { DescribeReservedInstanceOfferingsCommand, } from "./commands/DescribeReservedInstanceOfferingsCommand";
import { DescribeReservedInstancesCommand, } from "./commands/DescribeReservedInstancesCommand";
import { DissociatePackageCommand, } from "./commands/DissociatePackageCommand";
import { GetCompatibleVersionsCommand, } from "./commands/GetCompatibleVersionsCommand";
import { GetPackageVersionHistoryCommand, } from "./commands/GetPackageVersionHistoryCommand";
import { GetUpgradeHistoryCommand, } from "./commands/GetUpgradeHistoryCommand";
import { GetUpgradeStatusCommand, } from "./commands/GetUpgradeStatusCommand";
import { ListDomainNamesCommand, } from "./commands/ListDomainNamesCommand";
import { ListDomainsForPackageCommand, } from "./commands/ListDomainsForPackageCommand";
import { ListInstanceTypeDetailsCommand, } from "./commands/ListInstanceTypeDetailsCommand";
import { ListPackagesForDomainCommand, } from "./commands/ListPackagesForDomainCommand";
import { ListTagsCommand } from "./commands/ListTagsCommand";
import { ListVersionsCommand, } from "./commands/ListVersionsCommand";
import { PurchaseReservedInstanceOfferingCommand, } from "./commands/PurchaseReservedInstanceOfferingCommand";
import { RejectInboundConnectionCommand, } from "./commands/RejectInboundConnectionCommand";
import { RemoveTagsCommand } from "./commands/RemoveTagsCommand";
import { StartServiceSoftwareUpdateCommand, } from "./commands/StartServiceSoftwareUpdateCommand";
import { UpdateDomainConfigCommand, } from "./commands/UpdateDomainConfigCommand";
import { UpdatePackageCommand, } from "./commands/UpdatePackageCommand";
import { UpgradeDomainCommand, } from "./commands/UpgradeDomainCommand";
var OpenSearch = (function (_super) {
    __extends(OpenSearch, _super);
    function OpenSearch() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    OpenSearch.prototype.acceptInboundConnection = function (args, optionsOrCb, cb) {
        var command = new AcceptInboundConnectionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    OpenSearch.prototype.addTags = function (args, optionsOrCb, cb) {
        var command = new AddTagsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    OpenSearch.prototype.associatePackage = function (args, optionsOrCb, cb) {
        var command = new AssociatePackageCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    OpenSearch.prototype.cancelServiceSoftwareUpdate = function (args, optionsOrCb, cb) {
        var command = new CancelServiceSoftwareUpdateCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    OpenSearch.prototype.createDomain = function (args, optionsOrCb, cb) {
        var command = new CreateDomainCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    OpenSearch.prototype.createOutboundConnection = function (args, optionsOrCb, cb) {
        var command = new CreateOutboundConnectionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    OpenSearch.prototype.createPackage = function (args, optionsOrCb, cb) {
        var command = new CreatePackageCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    OpenSearch.prototype.deleteDomain = function (args, optionsOrCb, cb) {
        var command = new DeleteDomainCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    OpenSearch.prototype.deleteInboundConnection = function (args, optionsOrCb, cb) {
        var command = new DeleteInboundConnectionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    OpenSearch.prototype.deleteOutboundConnection = function (args, optionsOrCb, cb) {
        var command = new DeleteOutboundConnectionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    OpenSearch.prototype.deletePackage = function (args, optionsOrCb, cb) {
        var command = new DeletePackageCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    OpenSearch.prototype.describeDomain = function (args, optionsOrCb, cb) {
        var command = new DescribeDomainCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    OpenSearch.prototype.describeDomainAutoTunes = function (args, optionsOrCb, cb) {
        var command = new DescribeDomainAutoTunesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    OpenSearch.prototype.describeDomainConfig = function (args, optionsOrCb, cb) {
        var command = new DescribeDomainConfigCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    OpenSearch.prototype.describeDomains = function (args, optionsOrCb, cb) {
        var command = new DescribeDomainsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    OpenSearch.prototype.describeInboundConnections = function (args, optionsOrCb, cb) {
        var command = new DescribeInboundConnectionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    OpenSearch.prototype.describeInstanceTypeLimits = function (args, optionsOrCb, cb) {
        var command = new DescribeInstanceTypeLimitsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    OpenSearch.prototype.describeOutboundConnections = function (args, optionsOrCb, cb) {
        var command = new DescribeOutboundConnectionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    OpenSearch.prototype.describePackages = function (args, optionsOrCb, cb) {
        var command = new DescribePackagesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    OpenSearch.prototype.describeReservedInstanceOfferings = function (args, optionsOrCb, cb) {
        var command = new DescribeReservedInstanceOfferingsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    OpenSearch.prototype.describeReservedInstances = function (args, optionsOrCb, cb) {
        var command = new DescribeReservedInstancesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    OpenSearch.prototype.dissociatePackage = function (args, optionsOrCb, cb) {
        var command = new DissociatePackageCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    OpenSearch.prototype.getCompatibleVersions = function (args, optionsOrCb, cb) {
        var command = new GetCompatibleVersionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    OpenSearch.prototype.getPackageVersionHistory = function (args, optionsOrCb, cb) {
        var command = new GetPackageVersionHistoryCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    OpenSearch.prototype.getUpgradeHistory = function (args, optionsOrCb, cb) {
        var command = new GetUpgradeHistoryCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    OpenSearch.prototype.getUpgradeStatus = function (args, optionsOrCb, cb) {
        var command = new GetUpgradeStatusCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    OpenSearch.prototype.listDomainNames = function (args, optionsOrCb, cb) {
        var command = new ListDomainNamesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    OpenSearch.prototype.listDomainsForPackage = function (args, optionsOrCb, cb) {
        var command = new ListDomainsForPackageCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    OpenSearch.prototype.listInstanceTypeDetails = function (args, optionsOrCb, cb) {
        var command = new ListInstanceTypeDetailsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    OpenSearch.prototype.listPackagesForDomain = function (args, optionsOrCb, cb) {
        var command = new ListPackagesForDomainCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    OpenSearch.prototype.listTags = function (args, optionsOrCb, cb) {
        var command = new ListTagsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    OpenSearch.prototype.listVersions = function (args, optionsOrCb, cb) {
        var command = new ListVersionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    OpenSearch.prototype.purchaseReservedInstanceOffering = function (args, optionsOrCb, cb) {
        var command = new PurchaseReservedInstanceOfferingCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    OpenSearch.prototype.rejectInboundConnection = function (args, optionsOrCb, cb) {
        var command = new RejectInboundConnectionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    OpenSearch.prototype.removeTags = function (args, optionsOrCb, cb) {
        var command = new RemoveTagsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    OpenSearch.prototype.startServiceSoftwareUpdate = function (args, optionsOrCb, cb) {
        var command = new StartServiceSoftwareUpdateCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    OpenSearch.prototype.updateDomainConfig = function (args, optionsOrCb, cb) {
        var command = new UpdateDomainConfigCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    OpenSearch.prototype.updatePackage = function (args, optionsOrCb, cb) {
        var command = new UpdatePackageCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    OpenSearch.prototype.upgradeDomain = function (args, optionsOrCb, cb) {
        var command = new UpgradeDomainCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error("Expect http options but get " + typeof optionsOrCb);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    };
    return OpenSearch;
}(OpenSearchClient));
export { OpenSearch };
//# sourceMappingURL=OpenSearch.js.map