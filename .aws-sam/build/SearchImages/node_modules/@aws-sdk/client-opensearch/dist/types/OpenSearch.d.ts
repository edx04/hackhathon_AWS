import { OpenSearchClient } from "./OpenSearchClient";
import { AcceptInboundConnectionCommandInput, AcceptInboundConnectionCommandOutput } from "./commands/AcceptInboundConnectionCommand";
import { AddTagsCommandInput, AddTagsCommandOutput } from "./commands/AddTagsCommand";
import { AssociatePackageCommandInput, AssociatePackageCommandOutput } from "./commands/AssociatePackageCommand";
import { CancelServiceSoftwareUpdateCommandInput, CancelServiceSoftwareUpdateCommandOutput } from "./commands/CancelServiceSoftwareUpdateCommand";
import { CreateDomainCommandInput, CreateDomainCommandOutput } from "./commands/CreateDomainCommand";
import { CreateOutboundConnectionCommandInput, CreateOutboundConnectionCommandOutput } from "./commands/CreateOutboundConnectionCommand";
import { CreatePackageCommandInput, CreatePackageCommandOutput } from "./commands/CreatePackageCommand";
import { DeleteDomainCommandInput, DeleteDomainCommandOutput } from "./commands/DeleteDomainCommand";
import { DeleteInboundConnectionCommandInput, DeleteInboundConnectionCommandOutput } from "./commands/DeleteInboundConnectionCommand";
import { DeleteOutboundConnectionCommandInput, DeleteOutboundConnectionCommandOutput } from "./commands/DeleteOutboundConnectionCommand";
import { DeletePackageCommandInput, DeletePackageCommandOutput } from "./commands/DeletePackageCommand";
import { DescribeDomainAutoTunesCommandInput, DescribeDomainAutoTunesCommandOutput } from "./commands/DescribeDomainAutoTunesCommand";
import { DescribeDomainCommandInput, DescribeDomainCommandOutput } from "./commands/DescribeDomainCommand";
import { DescribeDomainConfigCommandInput, DescribeDomainConfigCommandOutput } from "./commands/DescribeDomainConfigCommand";
import { DescribeDomainsCommandInput, DescribeDomainsCommandOutput } from "./commands/DescribeDomainsCommand";
import { DescribeInboundConnectionsCommandInput, DescribeInboundConnectionsCommandOutput } from "./commands/DescribeInboundConnectionsCommand";
import { DescribeInstanceTypeLimitsCommandInput, DescribeInstanceTypeLimitsCommandOutput } from "./commands/DescribeInstanceTypeLimitsCommand";
import { DescribeOutboundConnectionsCommandInput, DescribeOutboundConnectionsCommandOutput } from "./commands/DescribeOutboundConnectionsCommand";
import { DescribePackagesCommandInput, DescribePackagesCommandOutput } from "./commands/DescribePackagesCommand";
import { DescribeReservedInstanceOfferingsCommandInput, DescribeReservedInstanceOfferingsCommandOutput } from "./commands/DescribeReservedInstanceOfferingsCommand";
import { DescribeReservedInstancesCommandInput, DescribeReservedInstancesCommandOutput } from "./commands/DescribeReservedInstancesCommand";
import { DissociatePackageCommandInput, DissociatePackageCommandOutput } from "./commands/DissociatePackageCommand";
import { GetCompatibleVersionsCommandInput, GetCompatibleVersionsCommandOutput } from "./commands/GetCompatibleVersionsCommand";
import { GetPackageVersionHistoryCommandInput, GetPackageVersionHistoryCommandOutput } from "./commands/GetPackageVersionHistoryCommand";
import { GetUpgradeHistoryCommandInput, GetUpgradeHistoryCommandOutput } from "./commands/GetUpgradeHistoryCommand";
import { GetUpgradeStatusCommandInput, GetUpgradeStatusCommandOutput } from "./commands/GetUpgradeStatusCommand";
import { ListDomainNamesCommandInput, ListDomainNamesCommandOutput } from "./commands/ListDomainNamesCommand";
import { ListDomainsForPackageCommandInput, ListDomainsForPackageCommandOutput } from "./commands/ListDomainsForPackageCommand";
import { ListInstanceTypeDetailsCommandInput, ListInstanceTypeDetailsCommandOutput } from "./commands/ListInstanceTypeDetailsCommand";
import { ListPackagesForDomainCommandInput, ListPackagesForDomainCommandOutput } from "./commands/ListPackagesForDomainCommand";
import { ListTagsCommandInput, ListTagsCommandOutput } from "./commands/ListTagsCommand";
import { ListVersionsCommandInput, ListVersionsCommandOutput } from "./commands/ListVersionsCommand";
import { PurchaseReservedInstanceOfferingCommandInput, PurchaseReservedInstanceOfferingCommandOutput } from "./commands/PurchaseReservedInstanceOfferingCommand";
import { RejectInboundConnectionCommandInput, RejectInboundConnectionCommandOutput } from "./commands/RejectInboundConnectionCommand";
import { RemoveTagsCommandInput, RemoveTagsCommandOutput } from "./commands/RemoveTagsCommand";
import { StartServiceSoftwareUpdateCommandInput, StartServiceSoftwareUpdateCommandOutput } from "./commands/StartServiceSoftwareUpdateCommand";
import { UpdateDomainConfigCommandInput, UpdateDomainConfigCommandOutput } from "./commands/UpdateDomainConfigCommand";
import { UpdatePackageCommandInput, UpdatePackageCommandOutput } from "./commands/UpdatePackageCommand";
import { UpgradeDomainCommandInput, UpgradeDomainCommandOutput } from "./commands/UpgradeDomainCommand";
import { HttpHandlerOptions as __HttpHandlerOptions } from "@aws-sdk/types";
/**
 * <fullname>Amazon OpenSearch Configuration Service</fullname>
 *     <p>Use the Amazon OpenSearch configuration API to create, configure, and manage Amazon OpenSearch Service domains.</p>
 *     <p>For sample code that uses the configuration API, see the <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/opensearch-configuration-samples.html">
 *       Amazon OpenSearch Service Developer Guide</a>.
 *       The guide also contains <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/request-signing.html">
 *         sample
 *         code for sending signed HTTP requests to the OpenSearch APIs</a>.
 *     </p>
 *     <p>The endpoint for configuration service requests is region-specific: es.<i>region</i>.amazonaws.com.
 *       For example, es.us-east-1.amazonaws.com. For a current list of supported regions and endpoints,
 *       see <a href="http://docs.aws.amazon.com/general/latest/gr/rande.html#service-regions" target="_blank">Regions and Endpoints</a>.
 *     </p>
 */
export declare class OpenSearch extends OpenSearchClient {
    /**
     * <p>Allows the remote domain owner to accept an inbound cross-cluster connection request.</p>
     */
    acceptInboundConnection(args: AcceptInboundConnectionCommandInput, options?: __HttpHandlerOptions): Promise<AcceptInboundConnectionCommandOutput>;
    acceptInboundConnection(args: AcceptInboundConnectionCommandInput, cb: (err: any, data?: AcceptInboundConnectionCommandOutput) => void): void;
    acceptInboundConnection(args: AcceptInboundConnectionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AcceptInboundConnectionCommandOutput) => void): void;
    /**
     * <p>Attaches tags to an existing domain. Tags are a set of case-sensitive key value pairs. An
     *       domain can have up to 10 tags. See
     *       <a href="http://docs.aws.amazon.com/opensearch-service/latest/developerguide/managedomains.html#managedomains-awsresorcetagging" target="_blank">
     *         Tagging Amazon OpenSearch Service domains</a> for more information.
     *     </p>
     */
    addTags(args: AddTagsCommandInput, options?: __HttpHandlerOptions): Promise<AddTagsCommandOutput>;
    addTags(args: AddTagsCommandInput, cb: (err: any, data?: AddTagsCommandOutput) => void): void;
    addTags(args: AddTagsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AddTagsCommandOutput) => void): void;
    /**
     * <p>Associates a package with an Amazon OpenSearch Service domain.</p>
     */
    associatePackage(args: AssociatePackageCommandInput, options?: __HttpHandlerOptions): Promise<AssociatePackageCommandOutput>;
    associatePackage(args: AssociatePackageCommandInput, cb: (err: any, data?: AssociatePackageCommandOutput) => void): void;
    associatePackage(args: AssociatePackageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: AssociatePackageCommandOutput) => void): void;
    /**
     * <p>Cancels a scheduled service software update for an Amazon OpenSearch Service domain. You can only perform this operation before
     *       the <code>AutomatedUpdateDate</code> and when the <code>UpdateStatus</code> is in the <code>PENDING_UPDATE</code> state.
     *     </p>
     */
    cancelServiceSoftwareUpdate(args: CancelServiceSoftwareUpdateCommandInput, options?: __HttpHandlerOptions): Promise<CancelServiceSoftwareUpdateCommandOutput>;
    cancelServiceSoftwareUpdate(args: CancelServiceSoftwareUpdateCommandInput, cb: (err: any, data?: CancelServiceSoftwareUpdateCommandOutput) => void): void;
    cancelServiceSoftwareUpdate(args: CancelServiceSoftwareUpdateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CancelServiceSoftwareUpdateCommandOutput) => void): void;
    /**
     * <p>Creates a new Amazon OpenSearch Service domain. For more information,
     *       see <a href="http://docs.aws.amazon.com/opensearch-service/latest/developerguide/createupdatedomains.html" target="_blank">Creating and managing Amazon OpenSearch Service domains
     *       </a> in the <i>Amazon OpenSearch Service Developer Guide</i>.
     *     </p>
     */
    createDomain(args: CreateDomainCommandInput, options?: __HttpHandlerOptions): Promise<CreateDomainCommandOutput>;
    createDomain(args: CreateDomainCommandInput, cb: (err: any, data?: CreateDomainCommandOutput) => void): void;
    createDomain(args: CreateDomainCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateDomainCommandOutput) => void): void;
    /**
     * <p>Creates a new cross-cluster connection from a local OpenSearch domain to a remote OpenSearch domain.</p>
     */
    createOutboundConnection(args: CreateOutboundConnectionCommandInput, options?: __HttpHandlerOptions): Promise<CreateOutboundConnectionCommandOutput>;
    createOutboundConnection(args: CreateOutboundConnectionCommandInput, cb: (err: any, data?: CreateOutboundConnectionCommandOutput) => void): void;
    createOutboundConnection(args: CreateOutboundConnectionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreateOutboundConnectionCommandOutput) => void): void;
    /**
     * <p>Create a package for use with Amazon OpenSearch Service domains.</p>
     */
    createPackage(args: CreatePackageCommandInput, options?: __HttpHandlerOptions): Promise<CreatePackageCommandOutput>;
    createPackage(args: CreatePackageCommandInput, cb: (err: any, data?: CreatePackageCommandOutput) => void): void;
    createPackage(args: CreatePackageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: CreatePackageCommandOutput) => void): void;
    /**
     * <p>Permanently deletes the specified domain and all of its data. Once a domain is deleted, it cannot
     *       be recovered.
     *     </p>
     */
    deleteDomain(args: DeleteDomainCommandInput, options?: __HttpHandlerOptions): Promise<DeleteDomainCommandOutput>;
    deleteDomain(args: DeleteDomainCommandInput, cb: (err: any, data?: DeleteDomainCommandOutput) => void): void;
    deleteDomain(args: DeleteDomainCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteDomainCommandOutput) => void): void;
    /**
     * <p>Allows the remote domain owner to delete an existing inbound cross-cluster connection.</p>
     */
    deleteInboundConnection(args: DeleteInboundConnectionCommandInput, options?: __HttpHandlerOptions): Promise<DeleteInboundConnectionCommandOutput>;
    deleteInboundConnection(args: DeleteInboundConnectionCommandInput, cb: (err: any, data?: DeleteInboundConnectionCommandOutput) => void): void;
    deleteInboundConnection(args: DeleteInboundConnectionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteInboundConnectionCommandOutput) => void): void;
    /**
     * <p>Allows the local domain owner to delete an existing outbound cross-cluster connection.</p>
     */
    deleteOutboundConnection(args: DeleteOutboundConnectionCommandInput, options?: __HttpHandlerOptions): Promise<DeleteOutboundConnectionCommandOutput>;
    deleteOutboundConnection(args: DeleteOutboundConnectionCommandInput, cb: (err: any, data?: DeleteOutboundConnectionCommandOutput) => void): void;
    deleteOutboundConnection(args: DeleteOutboundConnectionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeleteOutboundConnectionCommandOutput) => void): void;
    /**
     * <p>Deletes the package.</p>
     */
    deletePackage(args: DeletePackageCommandInput, options?: __HttpHandlerOptions): Promise<DeletePackageCommandOutput>;
    deletePackage(args: DeletePackageCommandInput, cb: (err: any, data?: DeletePackageCommandOutput) => void): void;
    deletePackage(args: DeletePackageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DeletePackageCommandOutput) => void): void;
    /**
     * <p>Returns domain configuration information about the specified domain, including the domain ID,
     *       domain endpoint, and domain ARN.
     *     </p>
     */
    describeDomain(args: DescribeDomainCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDomainCommandOutput>;
    describeDomain(args: DescribeDomainCommandInput, cb: (err: any, data?: DescribeDomainCommandOutput) => void): void;
    describeDomain(args: DescribeDomainCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDomainCommandOutput) => void): void;
    /**
     * <p>Provides scheduled Auto-Tune action details for the domain, such as Auto-Tune action type,
     *       description, severity, and scheduled date.
     *     </p>
     */
    describeDomainAutoTunes(args: DescribeDomainAutoTunesCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDomainAutoTunesCommandOutput>;
    describeDomainAutoTunes(args: DescribeDomainAutoTunesCommandInput, cb: (err: any, data?: DescribeDomainAutoTunesCommandOutput) => void): void;
    describeDomainAutoTunes(args: DescribeDomainAutoTunesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDomainAutoTunesCommandOutput) => void): void;
    /**
     * <p>Provides cluster configuration information about the specified domain, such as the state, creation
     *       date, update version, and update date for cluster options.
     *     </p>
     */
    describeDomainConfig(args: DescribeDomainConfigCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDomainConfigCommandOutput>;
    describeDomainConfig(args: DescribeDomainConfigCommandInput, cb: (err: any, data?: DescribeDomainConfigCommandOutput) => void): void;
    describeDomainConfig(args: DescribeDomainConfigCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDomainConfigCommandOutput) => void): void;
    /**
     * <p>Returns domain configuration information about the specified domains, including the domain ID,
     *       domain endpoint, and domain ARN.
     *     </p>
     */
    describeDomains(args: DescribeDomainsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeDomainsCommandOutput>;
    describeDomains(args: DescribeDomainsCommandInput, cb: (err: any, data?: DescribeDomainsCommandOutput) => void): void;
    describeDomains(args: DescribeDomainsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeDomainsCommandOutput) => void): void;
    /**
     * <p>Lists all the inbound cross-cluster connections for a remote domain.</p>
     */
    describeInboundConnections(args: DescribeInboundConnectionsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeInboundConnectionsCommandOutput>;
    describeInboundConnections(args: DescribeInboundConnectionsCommandInput, cb: (err: any, data?: DescribeInboundConnectionsCommandOutput) => void): void;
    describeInboundConnections(args: DescribeInboundConnectionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeInboundConnectionsCommandOutput) => void): void;
    /**
     * <p>
     *       Describe the limits for a given instance type and OpenSearch or Elasticsearch version.
     *       When modifying an existing domain, specify the
     *       <code>
     *         <a>DomainName</a>
     *       </code>
     *       to see which limits you can modify.
     *     </p>
     */
    describeInstanceTypeLimits(args: DescribeInstanceTypeLimitsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeInstanceTypeLimitsCommandOutput>;
    describeInstanceTypeLimits(args: DescribeInstanceTypeLimitsCommandInput, cb: (err: any, data?: DescribeInstanceTypeLimitsCommandOutput) => void): void;
    describeInstanceTypeLimits(args: DescribeInstanceTypeLimitsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeInstanceTypeLimitsCommandOutput) => void): void;
    /**
     * <p>Lists all the outbound cross-cluster connections for a local domain.</p>
     */
    describeOutboundConnections(args: DescribeOutboundConnectionsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeOutboundConnectionsCommandOutput>;
    describeOutboundConnections(args: DescribeOutboundConnectionsCommandInput, cb: (err: any, data?: DescribeOutboundConnectionsCommandOutput) => void): void;
    describeOutboundConnections(args: DescribeOutboundConnectionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeOutboundConnectionsCommandOutput) => void): void;
    /**
     * <p>Describes all packages available to Amazon OpenSearch Service domains. Includes options for filtering, limiting the number of results,
     *       and pagination.
     *     </p>
     */
    describePackages(args: DescribePackagesCommandInput, options?: __HttpHandlerOptions): Promise<DescribePackagesCommandOutput>;
    describePackages(args: DescribePackagesCommandInput, cb: (err: any, data?: DescribePackagesCommandOutput) => void): void;
    describePackages(args: DescribePackagesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribePackagesCommandOutput) => void): void;
    /**
     * <p>Lists available reserved OpenSearch instance offerings.</p>
     */
    describeReservedInstanceOfferings(args: DescribeReservedInstanceOfferingsCommandInput, options?: __HttpHandlerOptions): Promise<DescribeReservedInstanceOfferingsCommandOutput>;
    describeReservedInstanceOfferings(args: DescribeReservedInstanceOfferingsCommandInput, cb: (err: any, data?: DescribeReservedInstanceOfferingsCommandOutput) => void): void;
    describeReservedInstanceOfferings(args: DescribeReservedInstanceOfferingsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeReservedInstanceOfferingsCommandOutput) => void): void;
    /**
     * <p>Returns information about reserved OpenSearch instances for this account.</p>
     */
    describeReservedInstances(args: DescribeReservedInstancesCommandInput, options?: __HttpHandlerOptions): Promise<DescribeReservedInstancesCommandOutput>;
    describeReservedInstances(args: DescribeReservedInstancesCommandInput, cb: (err: any, data?: DescribeReservedInstancesCommandOutput) => void): void;
    describeReservedInstances(args: DescribeReservedInstancesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DescribeReservedInstancesCommandOutput) => void): void;
    /**
     * <p>Dissociates a package from the Amazon OpenSearch Service domain.</p>
     */
    dissociatePackage(args: DissociatePackageCommandInput, options?: __HttpHandlerOptions): Promise<DissociatePackageCommandOutput>;
    dissociatePackage(args: DissociatePackageCommandInput, cb: (err: any, data?: DissociatePackageCommandOutput) => void): void;
    dissociatePackage(args: DissociatePackageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: DissociatePackageCommandOutput) => void): void;
    /**
     * <p>
     *       Returns a list of upgrade-compatible versions of OpenSearch/Elasticsearch.
     *       You can optionally pass a
     *       <code>
     *         <a>DomainName</a>
     *       </code>
     *       to get all upgrade-compatible versions of OpenSearch/Elasticsearch for that specific domain.
     *     </p>
     */
    getCompatibleVersions(args: GetCompatibleVersionsCommandInput, options?: __HttpHandlerOptions): Promise<GetCompatibleVersionsCommandOutput>;
    getCompatibleVersions(args: GetCompatibleVersionsCommandInput, cb: (err: any, data?: GetCompatibleVersionsCommandOutput) => void): void;
    getCompatibleVersions(args: GetCompatibleVersionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetCompatibleVersionsCommandOutput) => void): void;
    /**
     * <p>Returns a list of package versions, along with their creation time and commit message.</p>
     */
    getPackageVersionHistory(args: GetPackageVersionHistoryCommandInput, options?: __HttpHandlerOptions): Promise<GetPackageVersionHistoryCommandOutput>;
    getPackageVersionHistory(args: GetPackageVersionHistoryCommandInput, cb: (err: any, data?: GetPackageVersionHistoryCommandOutput) => void): void;
    getPackageVersionHistory(args: GetPackageVersionHistoryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetPackageVersionHistoryCommandOutput) => void): void;
    /**
     * <p>Retrieves the complete history of the last 10 upgrades performed on the domain.</p>
     */
    getUpgradeHistory(args: GetUpgradeHistoryCommandInput, options?: __HttpHandlerOptions): Promise<GetUpgradeHistoryCommandOutput>;
    getUpgradeHistory(args: GetUpgradeHistoryCommandInput, cb: (err: any, data?: GetUpgradeHistoryCommandOutput) => void): void;
    getUpgradeHistory(args: GetUpgradeHistoryCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetUpgradeHistoryCommandOutput) => void): void;
    /**
     * <p>Retrieves the latest status of the last upgrade or upgrade eligibility check performed on the domain.
     *     </p>
     */
    getUpgradeStatus(args: GetUpgradeStatusCommandInput, options?: __HttpHandlerOptions): Promise<GetUpgradeStatusCommandOutput>;
    getUpgradeStatus(args: GetUpgradeStatusCommandInput, cb: (err: any, data?: GetUpgradeStatusCommandOutput) => void): void;
    getUpgradeStatus(args: GetUpgradeStatusCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: GetUpgradeStatusCommandOutput) => void): void;
    /**
     * <p>Returns the names of all domains owned by the current user's account.</p>
     */
    listDomainNames(args: ListDomainNamesCommandInput, options?: __HttpHandlerOptions): Promise<ListDomainNamesCommandOutput>;
    listDomainNames(args: ListDomainNamesCommandInput, cb: (err: any, data?: ListDomainNamesCommandOutput) => void): void;
    listDomainNames(args: ListDomainNamesCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDomainNamesCommandOutput) => void): void;
    /**
     * <p>Lists all Amazon OpenSearch Service domains associated with the package.</p>
     */
    listDomainsForPackage(args: ListDomainsForPackageCommandInput, options?: __HttpHandlerOptions): Promise<ListDomainsForPackageCommandOutput>;
    listDomainsForPackage(args: ListDomainsForPackageCommandInput, cb: (err: any, data?: ListDomainsForPackageCommandOutput) => void): void;
    listDomainsForPackage(args: ListDomainsForPackageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListDomainsForPackageCommandOutput) => void): void;
    listInstanceTypeDetails(args: ListInstanceTypeDetailsCommandInput, options?: __HttpHandlerOptions): Promise<ListInstanceTypeDetailsCommandOutput>;
    listInstanceTypeDetails(args: ListInstanceTypeDetailsCommandInput, cb: (err: any, data?: ListInstanceTypeDetailsCommandOutput) => void): void;
    listInstanceTypeDetails(args: ListInstanceTypeDetailsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListInstanceTypeDetailsCommandOutput) => void): void;
    /**
     * <p>Lists all packages associated with the Amazon OpenSearch Service domain.</p>
     */
    listPackagesForDomain(args: ListPackagesForDomainCommandInput, options?: __HttpHandlerOptions): Promise<ListPackagesForDomainCommandOutput>;
    listPackagesForDomain(args: ListPackagesForDomainCommandInput, cb: (err: any, data?: ListPackagesForDomainCommandOutput) => void): void;
    listPackagesForDomain(args: ListPackagesForDomainCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListPackagesForDomainCommandOutput) => void): void;
    /**
     * <p>Returns all tags for the given domain.</p>
     */
    listTags(args: ListTagsCommandInput, options?: __HttpHandlerOptions): Promise<ListTagsCommandOutput>;
    listTags(args: ListTagsCommandInput, cb: (err: any, data?: ListTagsCommandOutput) => void): void;
    listTags(args: ListTagsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListTagsCommandOutput) => void): void;
    /**
     * <p>List all supported versions of OpenSearch and Elasticsearch.</p>
     */
    listVersions(args: ListVersionsCommandInput, options?: __HttpHandlerOptions): Promise<ListVersionsCommandOutput>;
    listVersions(args: ListVersionsCommandInput, cb: (err: any, data?: ListVersionsCommandOutput) => void): void;
    listVersions(args: ListVersionsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: ListVersionsCommandOutput) => void): void;
    /**
     * <p>Allows you to purchase reserved OpenSearch instances.</p>
     */
    purchaseReservedInstanceOffering(args: PurchaseReservedInstanceOfferingCommandInput, options?: __HttpHandlerOptions): Promise<PurchaseReservedInstanceOfferingCommandOutput>;
    purchaseReservedInstanceOffering(args: PurchaseReservedInstanceOfferingCommandInput, cb: (err: any, data?: PurchaseReservedInstanceOfferingCommandOutput) => void): void;
    purchaseReservedInstanceOffering(args: PurchaseReservedInstanceOfferingCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: PurchaseReservedInstanceOfferingCommandOutput) => void): void;
    /**
     * <p>Allows the remote domain owner to reject an inbound cross-cluster connection request.</p>
     */
    rejectInboundConnection(args: RejectInboundConnectionCommandInput, options?: __HttpHandlerOptions): Promise<RejectInboundConnectionCommandOutput>;
    rejectInboundConnection(args: RejectInboundConnectionCommandInput, cb: (err: any, data?: RejectInboundConnectionCommandOutput) => void): void;
    rejectInboundConnection(args: RejectInboundConnectionCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RejectInboundConnectionCommandOutput) => void): void;
    /**
     * <p>Removes the specified set of tags from the given domain.</p>
     */
    removeTags(args: RemoveTagsCommandInput, options?: __HttpHandlerOptions): Promise<RemoveTagsCommandOutput>;
    removeTags(args: RemoveTagsCommandInput, cb: (err: any, data?: RemoveTagsCommandOutput) => void): void;
    removeTags(args: RemoveTagsCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: RemoveTagsCommandOutput) => void): void;
    /**
     * <p>Schedules a service software update for an Amazon OpenSearch Service domain.</p>
     */
    startServiceSoftwareUpdate(args: StartServiceSoftwareUpdateCommandInput, options?: __HttpHandlerOptions): Promise<StartServiceSoftwareUpdateCommandOutput>;
    startServiceSoftwareUpdate(args: StartServiceSoftwareUpdateCommandInput, cb: (err: any, data?: StartServiceSoftwareUpdateCommandOutput) => void): void;
    startServiceSoftwareUpdate(args: StartServiceSoftwareUpdateCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: StartServiceSoftwareUpdateCommandOutput) => void): void;
    /**
     * <p>Modifies the cluster configuration of the specified domain, such as setting the instance type
     *       and the number of instances.
     *     </p>
     */
    updateDomainConfig(args: UpdateDomainConfigCommandInput, options?: __HttpHandlerOptions): Promise<UpdateDomainConfigCommandOutput>;
    updateDomainConfig(args: UpdateDomainConfigCommandInput, cb: (err: any, data?: UpdateDomainConfigCommandOutput) => void): void;
    updateDomainConfig(args: UpdateDomainConfigCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdateDomainConfigCommandOutput) => void): void;
    /**
     * <p>Updates a package for use with Amazon OpenSearch Service domains.</p>
     */
    updatePackage(args: UpdatePackageCommandInput, options?: __HttpHandlerOptions): Promise<UpdatePackageCommandOutput>;
    updatePackage(args: UpdatePackageCommandInput, cb: (err: any, data?: UpdatePackageCommandOutput) => void): void;
    updatePackage(args: UpdatePackageCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpdatePackageCommandOutput) => void): void;
    /**
     * <p>Allows you to either upgrade your domain or perform an upgrade eligibility check to a compatible version of OpenSearch or Elasticsearch.
     *     </p>
     */
    upgradeDomain(args: UpgradeDomainCommandInput, options?: __HttpHandlerOptions): Promise<UpgradeDomainCommandOutput>;
    upgradeDomain(args: UpgradeDomainCommandInput, cb: (err: any, data?: UpgradeDomainCommandOutput) => void): void;
    upgradeDomain(args: UpgradeDomainCommandInput, options: __HttpHandlerOptions, cb: (err: any, data?: UpgradeDomainCommandOutput) => void): void;
}
