"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpenSearch = void 0;
const OpenSearchClient_1 = require("./OpenSearchClient");
const AcceptInboundConnectionCommand_1 = require("./commands/AcceptInboundConnectionCommand");
const AddTagsCommand_1 = require("./commands/AddTagsCommand");
const AssociatePackageCommand_1 = require("./commands/AssociatePackageCommand");
const CancelServiceSoftwareUpdateCommand_1 = require("./commands/CancelServiceSoftwareUpdateCommand");
const CreateDomainCommand_1 = require("./commands/CreateDomainCommand");
const CreateOutboundConnectionCommand_1 = require("./commands/CreateOutboundConnectionCommand");
const CreatePackageCommand_1 = require("./commands/CreatePackageCommand");
const DeleteDomainCommand_1 = require("./commands/DeleteDomainCommand");
const DeleteInboundConnectionCommand_1 = require("./commands/DeleteInboundConnectionCommand");
const DeleteOutboundConnectionCommand_1 = require("./commands/DeleteOutboundConnectionCommand");
const DeletePackageCommand_1 = require("./commands/DeletePackageCommand");
const DescribeDomainAutoTunesCommand_1 = require("./commands/DescribeDomainAutoTunesCommand");
const DescribeDomainCommand_1 = require("./commands/DescribeDomainCommand");
const DescribeDomainConfigCommand_1 = require("./commands/DescribeDomainConfigCommand");
const DescribeDomainsCommand_1 = require("./commands/DescribeDomainsCommand");
const DescribeInboundConnectionsCommand_1 = require("./commands/DescribeInboundConnectionsCommand");
const DescribeInstanceTypeLimitsCommand_1 = require("./commands/DescribeInstanceTypeLimitsCommand");
const DescribeOutboundConnectionsCommand_1 = require("./commands/DescribeOutboundConnectionsCommand");
const DescribePackagesCommand_1 = require("./commands/DescribePackagesCommand");
const DescribeReservedInstanceOfferingsCommand_1 = require("./commands/DescribeReservedInstanceOfferingsCommand");
const DescribeReservedInstancesCommand_1 = require("./commands/DescribeReservedInstancesCommand");
const DissociatePackageCommand_1 = require("./commands/DissociatePackageCommand");
const GetCompatibleVersionsCommand_1 = require("./commands/GetCompatibleVersionsCommand");
const GetPackageVersionHistoryCommand_1 = require("./commands/GetPackageVersionHistoryCommand");
const GetUpgradeHistoryCommand_1 = require("./commands/GetUpgradeHistoryCommand");
const GetUpgradeStatusCommand_1 = require("./commands/GetUpgradeStatusCommand");
const ListDomainNamesCommand_1 = require("./commands/ListDomainNamesCommand");
const ListDomainsForPackageCommand_1 = require("./commands/ListDomainsForPackageCommand");
const ListInstanceTypeDetailsCommand_1 = require("./commands/ListInstanceTypeDetailsCommand");
const ListPackagesForDomainCommand_1 = require("./commands/ListPackagesForDomainCommand");
const ListTagsCommand_1 = require("./commands/ListTagsCommand");
const ListVersionsCommand_1 = require("./commands/ListVersionsCommand");
const PurchaseReservedInstanceOfferingCommand_1 = require("./commands/PurchaseReservedInstanceOfferingCommand");
const RejectInboundConnectionCommand_1 = require("./commands/RejectInboundConnectionCommand");
const RemoveTagsCommand_1 = require("./commands/RemoveTagsCommand");
const StartServiceSoftwareUpdateCommand_1 = require("./commands/StartServiceSoftwareUpdateCommand");
const UpdateDomainConfigCommand_1 = require("./commands/UpdateDomainConfigCommand");
const UpdatePackageCommand_1 = require("./commands/UpdatePackageCommand");
const UpgradeDomainCommand_1 = require("./commands/UpgradeDomainCommand");
/**
 * <fullname>Amazon OpenSearch Configuration Service</fullname>
 *     <p>Use the Amazon OpenSearch configuration API to create, configure, and manage Amazon OpenSearch Service domains.</p>
 *     <p>For sample code that uses the configuration API, see the <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/opensearch-configuration-samples.html">
 *       Amazon OpenSearch Service Developer Guide</a>.
 *       The guide also contains <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/request-signing.html">
 *         sample
 *         code for sending signed HTTP requests to the OpenSearch APIs</a>.
 *     </p>
 *     <p>The endpoint for configuration service requests is region-specific: es.<i>region</i>.amazonaws.com.
 *       For example, es.us-east-1.amazonaws.com. For a current list of supported regions and endpoints,
 *       see <a href="http://docs.aws.amazon.com/general/latest/gr/rande.html#service-regions" target="_blank">Regions and Endpoints</a>.
 *     </p>
 */
class OpenSearch extends OpenSearchClient_1.OpenSearchClient {
    acceptInboundConnection(args, optionsOrCb, cb) {
        const command = new AcceptInboundConnectionCommand_1.AcceptInboundConnectionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    addTags(args, optionsOrCb, cb) {
        const command = new AddTagsCommand_1.AddTagsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    associatePackage(args, optionsOrCb, cb) {
        const command = new AssociatePackageCommand_1.AssociatePackageCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    cancelServiceSoftwareUpdate(args, optionsOrCb, cb) {
        const command = new CancelServiceSoftwareUpdateCommand_1.CancelServiceSoftwareUpdateCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createDomain(args, optionsOrCb, cb) {
        const command = new CreateDomainCommand_1.CreateDomainCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createOutboundConnection(args, optionsOrCb, cb) {
        const command = new CreateOutboundConnectionCommand_1.CreateOutboundConnectionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    createPackage(args, optionsOrCb, cb) {
        const command = new CreatePackageCommand_1.CreatePackageCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteDomain(args, optionsOrCb, cb) {
        const command = new DeleteDomainCommand_1.DeleteDomainCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteInboundConnection(args, optionsOrCb, cb) {
        const command = new DeleteInboundConnectionCommand_1.DeleteInboundConnectionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deleteOutboundConnection(args, optionsOrCb, cb) {
        const command = new DeleteOutboundConnectionCommand_1.DeleteOutboundConnectionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    deletePackage(args, optionsOrCb, cb) {
        const command = new DeletePackageCommand_1.DeletePackageCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeDomain(args, optionsOrCb, cb) {
        const command = new DescribeDomainCommand_1.DescribeDomainCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeDomainAutoTunes(args, optionsOrCb, cb) {
        const command = new DescribeDomainAutoTunesCommand_1.DescribeDomainAutoTunesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeDomainConfig(args, optionsOrCb, cb) {
        const command = new DescribeDomainConfigCommand_1.DescribeDomainConfigCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeDomains(args, optionsOrCb, cb) {
        const command = new DescribeDomainsCommand_1.DescribeDomainsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeInboundConnections(args, optionsOrCb, cb) {
        const command = new DescribeInboundConnectionsCommand_1.DescribeInboundConnectionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeInstanceTypeLimits(args, optionsOrCb, cb) {
        const command = new DescribeInstanceTypeLimitsCommand_1.DescribeInstanceTypeLimitsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeOutboundConnections(args, optionsOrCb, cb) {
        const command = new DescribeOutboundConnectionsCommand_1.DescribeOutboundConnectionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describePackages(args, optionsOrCb, cb) {
        const command = new DescribePackagesCommand_1.DescribePackagesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeReservedInstanceOfferings(args, optionsOrCb, cb) {
        const command = new DescribeReservedInstanceOfferingsCommand_1.DescribeReservedInstanceOfferingsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    describeReservedInstances(args, optionsOrCb, cb) {
        const command = new DescribeReservedInstancesCommand_1.DescribeReservedInstancesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    dissociatePackage(args, optionsOrCb, cb) {
        const command = new DissociatePackageCommand_1.DissociatePackageCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getCompatibleVersions(args, optionsOrCb, cb) {
        const command = new GetCompatibleVersionsCommand_1.GetCompatibleVersionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getPackageVersionHistory(args, optionsOrCb, cb) {
        const command = new GetPackageVersionHistoryCommand_1.GetPackageVersionHistoryCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getUpgradeHistory(args, optionsOrCb, cb) {
        const command = new GetUpgradeHistoryCommand_1.GetUpgradeHistoryCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    getUpgradeStatus(args, optionsOrCb, cb) {
        const command = new GetUpgradeStatusCommand_1.GetUpgradeStatusCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    listDomainNames(args, optionsOrCb, cb) {
        const command = new ListDomainNamesCommand_1.ListDomainNamesCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    listDomainsForPackage(args, optionsOrCb, cb) {
        const command = new ListDomainsForPackageCommand_1.ListDomainsForPackageCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    listInstanceTypeDetails(args, optionsOrCb, cb) {
        const command = new ListInstanceTypeDetailsCommand_1.ListInstanceTypeDetailsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    listPackagesForDomain(args, optionsOrCb, cb) {
        const command = new ListPackagesForDomainCommand_1.ListPackagesForDomainCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    listTags(args, optionsOrCb, cb) {
        const command = new ListTagsCommand_1.ListTagsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    listVersions(args, optionsOrCb, cb) {
        const command = new ListVersionsCommand_1.ListVersionsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    purchaseReservedInstanceOffering(args, optionsOrCb, cb) {
        const command = new PurchaseReservedInstanceOfferingCommand_1.PurchaseReservedInstanceOfferingCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    rejectInboundConnection(args, optionsOrCb, cb) {
        const command = new RejectInboundConnectionCommand_1.RejectInboundConnectionCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    removeTags(args, optionsOrCb, cb) {
        const command = new RemoveTagsCommand_1.RemoveTagsCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    startServiceSoftwareUpdate(args, optionsOrCb, cb) {
        const command = new StartServiceSoftwareUpdateCommand_1.StartServiceSoftwareUpdateCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    updateDomainConfig(args, optionsOrCb, cb) {
        const command = new UpdateDomainConfigCommand_1.UpdateDomainConfigCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    updatePackage(args, optionsOrCb, cb) {
        const command = new UpdatePackageCommand_1.UpdatePackageCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
    upgradeDomain(args, optionsOrCb, cb) {
        const command = new UpgradeDomainCommand_1.UpgradeDomainCommand(args);
        if (typeof optionsOrCb === "function") {
            this.send(command, optionsOrCb);
        }
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object")
                throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        }
        else {
            return this.send(command, optionsOrCb);
        }
    }
}
exports.OpenSearch = OpenSearch;
//# sourceMappingURL=OpenSearch.js.map